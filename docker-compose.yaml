
services:
  dev-sever:
    image: blastfm-sever:1.1
    build: 
      context: ./server
      dockerfile: Dockerfile
    env_file: .env
    hostname: ${SERVER_HOST}
    ports: 
      - ${SERVER_PORT}:${SERVER_PORT}
    command: "npm run dev"
    volumes:
      - ./server:/server
      - blastfm-server-node-modules-v:/server/node_modules
    depends_on:
      dev-database:
          condition: service_healthy  

  dev-database:
    image: blastfm-database:1.1
    build: 
      context: ./database
      dockerfile: Dockerfile
    env_file: .env
    hostname: ${POSTGRES_HOST}
    ports: 
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - blastfm-database-v:/var/lib/postgresql/data
    command: "-p ${POSTGRES_PORT}"
    depends_on:
      dev-cache:
          condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -p ${POSTGRES_PORT} -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      start_period: 0s
      interval: 5s
      timeout: 5s
      retries: 5

  dev-cache:
    image: blastfm-cache:1.0
    build:
      context: ./cache
      dockerfile: Dockerfile
    hostname: ${REDIS_HOST}
    ports:
      - "${REDIS_PORT}:6379"
    env_file: .env
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -p ${REDIS_PORT} ping | grep PONG"]
      interval: 1s
      timeout: 3s
      retries: 5

volumes:
  blastfm-server-node-modules-v:
    name: "blastfm-server-node-modules-v"
  blastfm-database-v:
    name: "blastfm-database-v"


# docker-compose --env-file .env up
# docker exec -it blastfm-dev-database-1 psql -U admin -W blastfm -p 5000
# docker exec -it blast-fm-dev-cache-1 redis-cli